// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //provider = "prisma-client-js": This part specifies that you want the generated client code to be written in JavaScript. Prisma can generate client code for several languages, but here, you're choosing JavaScript ("js") specifically.
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String
  isAdmin         Boolean
  // userpreferences   Json
  // Post        Post[]
  writtenPosts    Post[]           @relation("WrittenPosts") //This relation describes which posts a particular User has created (written).
  favoritePosts   Post[]           @relation("FavoritePosts") //This relation describes which posts a particular User has favorited.
  userPreferences UserPreferences? // it contains all the info of user setting in the form of json
}

model UserPreferences {
  // Each UserPreferences object has:
  // id: A unique identifier for the preferences (usually a UUID).
  // emailUpdates: A boolean flag indicating whether the user wants to receive email updates (true) or not (false).
  // user: A one-to-one relationship with the User model. This connects a specific User to their preferences.
  // userId: A string field that acts as a foreign key referencing the id of the User (optional, might be redundant depending on Prisma's implementation). The @unique directive ensures only one userPreferences object exists per user.
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Post {
  id           String     @id @default(uuid())
  rating       Float
  createdAt    DateTime
  updatedAt    DateTime
  // author     User     @relation(fields: [authorId], references: [id]) // the relationship shows the relation that who creted the post from the user model
  // authorId  String
  author       User       @relation("WrittenPosts", fields: [authorId], references: [id]) // the relationship shows the relation that who creted the post from the user model
  authorId     String
  favoritedBy  User       @relation("FavoritePosts", fields: [favortedById], references: [id])
  favortedById String
  categories   Category[] // A single Post can belong to multiple categories. For example, a news article might be categorized as "World News" and "Politics."
}

model Category {
  id    String @id @default(uuid())
  posts Post[]  // A single Category can have many Posts associated with it. For example, the "World News" category might contain articles about various global events.
}
